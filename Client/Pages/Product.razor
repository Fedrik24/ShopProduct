@page "/Product"
@using Radzen
@using ShopProduct.Client.Utility
@using ShopProduct.Shared
@inject DataService dataService


<h3>Product Pages</h3>

<div>

</div>

<div>
    <h5>TESTING RADZEN</h5>
    @if(product == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@product" TItem="ProductItems" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="ProductItems" Property="Id" Title="Id" Frozen="true" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="ProductName" Title="Product Name" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="ProductType" Title="Product Type" Width="200px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="Price" Title="Price" Width="120px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="Amount" Title="Amount" FormatString="{0:d}" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Context="ProductItems" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                    <Template Context="ProductItems">
                        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => AddProduct(ProductItems))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => RemoveAdd())" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
</div>

<div>
    <p>Testing</p>
    <p>UserHistory Purchase Data</p>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@userProductItems" TItem="ProductItems" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="ProductItems" Property="Id" Title="Id" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="ProductName" Title="Product Name" Width="160px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="ProductType" Title="Product Type" Width="200px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="Price" Title="Price" Width="120px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="Amount" Title="Amount" FormatString="{0:d}" Width="160px" />
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code {
    IEnumerable<ProductItems> product;
    List<ProductItems> userProductItems = new List<ProductItems>();

    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
    }

    private async Task GetProduct()
    {
        product = await dataService.Service<List<ProductItems>>("Product", HttpMethod.Get);
        StateHasChanged();
    }



    private void AddProduct(ProductItems item)
    {
        Console.WriteLine($"Adding Items : {item.Id}");
        userProductItems.Add(item);
        StateHasChanged();
        // Adding Product
    }

    private void RemoveAdd()
    {
        // Remove Product
    }
}
