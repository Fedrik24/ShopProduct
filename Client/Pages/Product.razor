@page "/Product"
@using Radzen
@using ShopProduct.Client.Utility
@using ShopProduct.Shared
@using System.Text.Json
@inject DataService dataService
@inject IJSRuntime JSRuntime

<h3>Product Pages</h3>

<div>

</div>

<div>
    <h5>TESTING RADZEN</h5>
    @if(product == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@product" TItem="ProductItems" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
                <RadzenDataGridColumn TItem="ProductItems" Property="Id" Title="Id" Frozen="true" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="ProductName" Title="Product Name" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="ProductType" Title="Product Type" Width="200px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="Price" Title="Price" Width="120px" />
                <RadzenDataGridColumn TItem="ProductItems" Property="Amount" Title="Amount" FormatString="{0:d}" Width="160px" />
                <RadzenDataGridColumn TItem="ProductItems" Context="ProductItems" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                    <Template Context="Items">
                        <RadzenButton Icon="add_circle_outline" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => AddProduct(Items))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>             
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
</div>

<div>
    <p>Testing</p>
    <p>UserHistory Purchase Data</p>
    <RadzenButton Text="Refresh" Click="@RefreshItems"></RadzenButton>
    <RadzenButton Text="Buy" Click="@BuyItems"></RadzenButton>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@userProductItem" TItem="ProductItems" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="ProductItems" Property="Id" Title="Id" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="ProductName" Title="Product Name" Width="160px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="ProductType" Title="Product Type" Width="200px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="Price" Title="Price" Width="120px" />
            <RadzenDataGridColumn TItem="ProductItems" Property="Amount" Title="Amount" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn TItem="ProductItems" Context="ProductItems" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="ProductItems">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => RemoveAdd(ProductItems))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .product-title {
        min-height: 72px;
        background-color: var(--rz-secondary-lighter);
    }

    .price-badge {
        font-size: 16px;
        font-weight: bold;
        line-height: 20px;
        padding: 8px;
    }
</style>

@code {
    IEnumerable<ProductItems> product;
    List<ProductItems> userProductItem = new List<ProductItems>(); 
    List<UserPurchase> userPurchases = new List<UserPurchase>();

    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
    }

    private async Task GetProduct()
    {
        product = await dataService.ServiceHeaders<List<ProductItems>>("Product", HttpMethod.Get);
        StateHasChanged();
    }


    private async void AddProduct(ProductItems item)
    {
        if (item != null)
        {
            userProductItem.Add(item);
            await SaveItemsToLocalStorage();
        }
    }

    private async void BuyItems()
    {
        Console.WriteLine($"Buying Items");
        for(var i = 0; i < userProductItem.Count; i++)
        {
            userPurchases.Add(new UserPurchase
            {
                Amount = userProductItem[i].Amount,
                Price = userProductItem[i].Price,
                ProductType = userProductItem[i].ProductType,
                UserId = 1
            });
        }

        foreach (var item in userPurchases)
        {
            if (userPurchases != null)
            {
                var userBuy = dataService.ServiceBody<UserPurchase>("Product", HttpMethod.Post, item);
            }
        }
    }

    private async void RemoveAdd(ProductItems item)
    {
        if (item != null)
        {
            userProductItem.Remove(item);
            await SaveItemsToLocalStorage();
        }
    }

    async Task RefreshItems()
    {
        userProductItem = await LoadItemsFromLocalStorage();
    }

    async Task SaveItemsToLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "items", JsonSerializer.Serialize(userProductItem));
    }

    async Task<List<ProductItems>> LoadItemsFromLocalStorage()
    {
        var itemsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "items");
        return string.IsNullOrWhiteSpace(itemsJson) ? new List<ProductItems>() : JsonSerializer.Deserialize<List<ProductItems>>(itemsJson);
    }
}
